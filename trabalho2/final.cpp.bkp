#include <cstdlib> /* strand */
#include <ctime> /* time */
#include<iostream> /* std::cout, std::cin */
#include <cmath> /* floor */
#include <vector> /* std::vector */

#define ENTRADAS 31
#define BIAS 1
#define TAXA 1
#define LINHAS 6
#define COLUNAS 5
int letras[6][6][5]={
	{ // padrão A
	{0,1,1,1,0},
	{1,0,0,0,1},
	{1,0,0,0,1},
	{1,1,1,1,1},
	{1,0,0,0,1},
	{1,0,0,0,1}
	},{// padrão E
	{1,1,1,1,1},
	{1,0,0,0,0},
	{1,1,1,1,0},
	{1,0,0,0,0},
	{1,0,0,0,0},
	{1,1,1,1,1}
	},{// padrão T
	{1,1,1,1,1},
	{0,0,1,0,0},
	{0,0,1,0,0},
	{0,0,1,0,0},
	{0,0,1,0,0},
	{0,0,1,0,0}
	},{// padrão H
	{1,0,0,0,1},
	{1,0,0,0,1},
	{1,1,1,1,1},
	{1,0,0,0,1},
	{1,0,0,0,1},
	{1,0,0,0,1}
	},{// padrão C
	{0,1,1,1,1},
	{1,0,0,0,0},
	{1,0,0,0,0},
	{1,0,0,0,0},
	{1,0,0,0,0},
	{0,1,1,1,1}
	},{// padrão N
	{1,0,0,0,1},
	{1,1,0,0,1},
	{1,0,1,0,1},
	{1,0,0,1,1},
	{1,0,0,0,1},
	{1,0,0,0,1}
	}};


int padrao[7][6][5] ={
	{ // padrão 0
	{0,1,1,1,0},
	{1,0,0,0,1},
	{1,0,0,0,1},
	{1,0,0,0,1},
	{1,0,0,0,1},
	{0,1,1,1,0}
	},{// padrão 1
	{0,0,1,0,0},
	{0,1,1,0,0},
	{0,0,1,0,0},
	{0,0,1,0,0},
	{0,0,1,0,0},
	{1,1,1,1,1}
	},{// padrão 2
	{0,1,1,1,0},
	{0,1,0,1,0},
	{0,0,0,1,0},
	{0,0,1,0,0},
	{0,1,0,0,0},
	{1,1,1,1,1}
	},{// padrão 3
	{0,1,1,1,1},
	{0,0,0,0,1},
	{0,1,1,1,1},
	{0,0,0,0,1},
	{0,0,0,0,1},
	{0,1,1,1,1}
	},{// padrão 4
	{1,0,0,1,0},
	{1,0,0,1,0},
	{1,0,0,1,0},
	{1,1,1,1,0},
	{0,0,0,1,0},
	{0,0,0,1,0}
	},{// padrão 5
	{0,1,1,1,1},
	{0,1,0,0,0},
	{0,1,1,1,1},
	{0,0,0,0,1},
	{0,0,0,0,1},
	{0,1,1,1,1}
	},{// padrão 6
	{1,1,1,1,1},
	{1,0,0,0,0},
	{1,1,1,1,1},
	{1,0,0,0,1},
	{1,0,0,0,1},
	{1,1,1,1,1}
	}
	};

int distorcidos[20][6][5]= {
	{ // 1 bit
	{0,1,1,1,0},
	{1,1,0,0,1},
	{1,0,0,0,1},
	{1,0,0,0,1},
	{1,0,0,0,1},
	{0,1,1,1,0}},	{ //1 bit
		{0,0,1,1,0},
		{1,0,0,0,1},
		{1,0,0,0,1},
		{1,0,0,0,1},
		{1,0,0,0,1},
		{0,1,1,1,0}},	{ // 2 bits
			{0,1,1,1,0},
			{1,0,0,0,1},
			{1,0,0,0,1},
			{1,0,0,0,1},
			{1,0,0,0,1},
			{1,1,1,1,1}}, { // 2 bits
				{0,1,1,0,0},
				{1,0,0,0,1},
				{1,0,1,0,1},
				{1,0,0,0,1},
				{1,0,0,0,1},
				{0,1,1,1,0}}, { // 3 bits
					{0,1,1,1,0},
					{1,0,1,0,1},
					{1,0,1,0,1},
					{1,0,1,0,1},
					{1,0,0,0,1},
					{0,1,1,1,0}}, 
	{ // 3 bits
	{0,1,1,1,0},
	{1,1,0,0,1},
	{1,0,0,0,1},
	{1,0,0,0,1},
	{1,0,0,0,1},
	{1,1,1,1,1}}, { // 3 bits
		{0,0,1,0,0},
		{1,0,0,0,0},
		{1,0,0,0,1},
		{1,0,0,0,1},
		{1,0,0,0,1},
		{0,1,1,1,0}}, { // 4 bits
			{0,1,1,1,0},
			{0,0,0,0,1},
			{0,0,0,0,1},
			{0,0,0,0,1},
			{0,0,0,0,1},
			{0,1,1,1,0}}, { // 4 bits
				{0,1,1,1,0},
				{1,0,0,0,1},
				{0,0,1,0,0},
				{1,0,0,0,1},
				{1,0,0,0,1},
				{0,1,1,1,1}}, { // 4 bits
					{0,1,1,1,0},
					{1,0,0,0,1},
					{1,0,1,0,1},
					{0,0,0,0,0},
					{1,0,1,0,1},
					{0,1,1,1,0}
	},{ // 1 bit
	{0,0,1,0,0},
	{0,1,1,0,0},
	{0,0,1,0,0},
	{0,0,1,0,0},
	{0,0,1,0,0},
	{1,1,1,1,0}
		}, { // 1 bit
		{0,0,1,0,0},
		{0,0,1,0,0},
		{0,0,1,0,0},
		{0,0,1,0,0},
		{0,0,1,0,0},
		{1,1,1,1,1}
	  
	}, { // 2 bits
	{0,0,1,0,0},
	{0,1,1,0,0},
	{1,0,1,0,1},
	{0,0,1,0,0},
	{0,0,1,0,0},
	{1,1,1,1,1}
	}, { // 2 bits
	    {0,0,1,0,0},
	    {0,0,1,0,0},
	    {0,0,1,0,0},
	    {0,0,1,0,0},
	    {0,0,1,0,0},
	    {1,1,1,1,0}
	}, { // 3 bits	
	{0,0,1,0,0},
	{0,1,0,0,0},
	{0,0,0,0,0},
	{0,0,0,0,0},
	{0,0,1,0,0},
	{1,1,1,1,1}
	}, { // 3 bits
	    {0,1,1,1,0},
	    {0,0,1,0,0},
	    {0,0,1,0,0},
	    {0,0,1,0,0},
	    {0,0,1,0,0},
	    {1,1,1,1,1}
	}, { // 3 bits
	{0,0,1,1,0},
	{0,1,1,0,0},
	{0,0,1,0,0},
	{0,0,1,0,0},
	{0,0,1,0,0},
	{0,1,1,1,0}
	}, { // 4 bits
	    {0,0,1,1,0},
	    {0,1,0,0,0},
	    {1,0,1,0,0},
	    {0,0,1,0,0},
	    {0,0,1,0,0},
	    {0,1,1,1,1}
	}, { // 4 bits
	{0,0,1,1,0},
	{0,0,1,0,0},
	{0,0,0,0,0},
	{0,0,0,0,0},
	{1,0,1,0,0},
	{1,1,1,1,1}
	}, { // 4 bits
	    {0,1,1,1,0},
	    {0,1,1,0,0},
	    {0,0,1,0,0},
	    {0,0,1,0,0},
	    {0,0,1,0,0},
	    {0,1,1,1,0}}};
  
/* FUNÇÕES AUXILIARES */

/* Calcula números aleatórios de min a max */
double fRand(double min, double max)
{
	double f = (double)rand() / RAND_MAX;
	return floor( min + f * (max - min)*10)/10;
}


/* VARIÁVEIS GLOBAIS */

int exercicio;
int pesos;
int padroes;
int neuronios;
/* Cada linha representa um neurônio
 * Cada coluna representa um padrão */
int ft[6][6] ={
	{1,0,0,0,0,0},
	{0,1,0,0,0,0},
	{0,0,1,0,0,0},
	{0,0,0,1,0,0},
	{0,0,0,0,1,0},
	{0,0,0,0,0,1}};
	
double w[6] [31]={ // Pesos zerados
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}};

/* FUNÇÕES */
void menu(){

	std::cout<<" ------------- ATENÇÃO! ESCOLHER APENAS OPÇÕES VÁLIDAS ---------- \n";
	std::cout<<"Executar qual exercício (1, 2 ou 3)?\n";
	std::cin>>exercicio;
	std::cout<<"Pesos iniciais: \n1- Zerados\n2- Aleatórios\nOpção: "; 
	std::cin>>pesos;
}


/* Imprime os pesos */
void printPesos(){
	int i, j;
	for (j = 0; j < neuronios; j++){
		for (i = 0; i< ENTRADAS; i++)
			std::cout<<w[j][i]<<' ';
		std::cout<<'\n';
	}
}


/* Imprime um padrão */
void printPadrao(int p[][5])
{
	int i;
	int j;

	for (i = 0; i < LINHAS; i++){
		for (j = 0; j < COLUNAS; j++){
			if (p[i][j] == 0)
				std::cout<<" ";
			else
				std::cout<<"#";
		}
		std::cout<<'\n';
	}
}

void inicializa(){
  
  /* exercicio 1*/
  padroes = 2;
  neuronios = 1;
  
  if(exercicio == 2) // exercicio 2
    neuronios = 2;
    
  if (exercicio == 3){ //exercicio 3
    padroes = 6;
    neuronios = 6;
  }
  if (pesos == 2){ //pesos aleatórios
    int i, j;
    for(j = 0; j < neuronios; j++)
       for (i = 0; i < ENTRADAS; i++)
         w[j][i] = fRand(-1,1); 
  }
  
}

/* Função soma 
 * Exercício 1
 * Recebe a entrada de um padrão
 * e seus respectivos pesos
 */		
int soma(int p[][5],double w[]){

	int i;
	int j;
	int k = 0;
	int sum = 0;
	
/* Soma ponderada com entradas xi e pesos wi */
	for (i = 0; i < LINHAS; i++)
		for (j = 0; j < COLUNAS; j++){
			sum += p[i][j]*w[k];
			k++;
		}
	
	sum += BIAS*w[k]; /* Último peso =>  BIAS */

	/* Função de ativação DEGRAU */
	if (sum > 0)
		return 1;
	else 
		return 0;
}



/* Faz ajuste dos pesos de acordo com o padrão que não bateu 
 * Rebe:
 * padrao que não bateu
 * erro, diferença entre valores esperado e obtido
 * pesos, do neurônio, que serão atualizados
 */
void ajuste(int p[][5], int erro, double w[]){

	int i;
	int j;
	int k = 0;
	
	for (i = 0; i < LINHAS; i++)
		for (j = 0; j < COLUNAS; j++){
			w[k] = w[k] +  erro*TAXA*p[i][j];
			k++;
		}
		/* PESO BIAS */
		w[k] = w[k] + erro*TAXA*BIAS;
}
	

/* Recebe: 
 * uma linha da matriz ft[] 
 * uma linha da matriz w[]
 * correspondente a um neurônio */
int neuronio(int ft[], double w[]){

	int i;
	int sum;
	int erro = 0;
	int interacoes = 0;
	bool ajusta;
	do{
		ajusta = false;
		for (i = 0; i < padroes; i++){		  
		  sum = soma(padrao[i], w);
			erro = ft[i] - sum;
			if (erro != 0){
				ajusta = true;
				ajuste(padrao[i], erro, w);
			}	
		}
		interacoes++;
	}while(ajusta); 
	return interacoes;
}


/* Faz treinamento com entradas 0 e 1 
 * Exercício 1, 2, 3*/
 void treinamento(){
	int i;
	/* Faz o treinamento para cada neurônio */
	for (i = 0; i < neuronios; i++)
		std::cout<<neuronio(ft[i], w[i])<<" épocas para treinar o neurônio "<<i+1<<'\n';
}

void avalia(std::vector<int> y, int intervalo){
  int i, j = 0;
  switch(exercicio){
    case 1:
      for (i = 0; i < intervalo ; i++){
        if (y[i] == 0)
          std::cout<<" '1' \n";
        else
          std::cout<<" '0' \n";
        }
        break;
    case 2:
      for (i = 0; i < intervalo * neuronios; i= i + 2){
        switch(y[i]){
          case 0:
            switch(y[i+1]){
	case 0:
	  std::cout<<"Padrão não reconhecido\n";
	  break;
	case 1:
	  std::cout<<" '1' \n";
	  break;
            }
            break;
          case 1:
            switch(y[i+1]){
	case 0:
	  std::cout<<" '0' \n";
	  break;
	case 1:
	  std::cout<<"Padrão não reconhecido\n";
	  break;
            }
            break;
        }          
       }
      break;
    case 3:
      int saida;
      bool falha;
      for (i = 0; i < intervalo; i++){
        j = i*neuronios;
        saida = -1;
        falha = false;
        while(j <  i*neuronios + neuronios && !falha){
         if(y[j] == 1 ){
           if(saida == -1)
            saida = j - i*neuronios;
           else
             falha = true;	
           }
           j++;
        }
        if(falha || saida == -1)
          std::cout<<"Padrão não reconhecido\n";
        else
          std::cout<<"'"<<saida<<"'\n";
      }
      break; 
  }
}


void testaPadroes(int p[][LINHAS][COLUNAS], int inicio, int fim){
  
  int i;
  int j;
  std::vector<int> y;
  /* testa cada padrão com cada neuronio */
  for (j = inicio; j < fim; j++){
    for( i = 0; i < neuronios; i++){
      /* armazena resultado no vetor y */
      y.push_back(soma(p[j], w[i]));
    }
  }
  avalia(y, fim-inicio);
}

void controle(){
  inicializa(); 
  std::cout<<"TREINAMENTO:\n";  
  treinamento(); 
  std::cout<<"PESOS FINAIS:\n";
  printPesos();  
  std::cout<<"10 PADRÕES DISTORCIDOS DE '0':\n";
  testaPadroes(distorcidos,0,10);  
  std::cout<<"10 PADRÕES DISTORCIDOS DE '1':\n";
  testaPadroes(distorcidos,10,20);
  if(exercicio != 3){
    std::cout<<"PADRÕES DE 2 A 5:\n";
    testaPadroes(padrao,2,6);  
  }
  if(exercicio == 3){
    std::cout<<"PADRÕES 'A', 'E', 'T', 'H' 'C' 'N':\n";
    testaPadroes(letras,0,6);
  }
}

int main(){
  std::time_t time_ui = std::time(0);
  menu();
  controle();
}