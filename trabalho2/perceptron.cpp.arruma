#include <iostream> //std::cout
#include <vector>
#include <cstdlib>
#include <ctime>
#include <cmath>

int distorcidos[20][6][5]= {{
	{0,1,1,1,0},
	{1,0,0,0,1},
	{1,0,1,0,1},
	{1,0,0,0,1},
	{1,0,0,0,1},
	{0,1,1,1,0}},	{
		{0,0,1,1,0},
		{1,0,0,0,1},
		{1,0,0,0,1},
		{1,0,0,0,1},
		{1,0,0,0,1},
		{0,1,1,1,0}},	{
			{0,1,1,1,0},
			{1,0,0,0,1},
			{1,0,0,0,1},
			{1,0,0,0,1},
			{1,0,0,0,1},
			{1,1,1,1,0}}, {
				{0,1,1,0,0},
				{1,0,0,0,1},
				{1,0,1,0,1},
				{1,0,0,0,1},
				{1,0,0,0,1},
				{0,1,1,1,0}}, {
					{0,0,1,1,0},
					{1,1,0,0,1},
					{1,0,0,0,1},
					{1,0,0,0,1},
					{1,0,0,0,1},
					{0,1,1,1,0}}, {
	{0,1,1,1,0},
	{1,0,1,0,1},
	{1,0,1,0,1},
	{1,0,0,0,1},
	{1,0,0,0,1},
	{0,1,1,1,0}}, {
		{0,1,1,1,0},
		{1,1,1,0,1},
		{1,0,1,0,1},
		{1,0,0,0,1},
		{1,0,0,0,1},
		{0,1,1,1,0}}, { 
			{0,0,1,0,0},
			{1,0,0,0,1},
			{1,0,0,0,1},
			{1,0,0,0,0},
			{1,0,0,0,1},
			{0,1,1,1,0}}, {
				{0,1,1,1,0},
				{1,1,0,0,1},
				{1,0,0,0,0},
				{1,0,0,0,1},
				{1,0,0,0,1},
				{1,1,1,1,0}}, {
					{0,1,1,1,0},
					{1,0,0,0,1},
					{1,0,0,0,1},
					{0,0,0,0,0},
					{1,0,0,0,1},
					{1,1,1,1,1}},{ 
	{0,0,0,0,0},
	{0,1,1,0,0},
	{0,0,1,0,0},
	{0,0,1,0,0},
	{0,0,1,0,0},
	{1,1,1,1,1}}, {
			{0,0,1,0,0},
			{0,1,1,0,0},
			{0,0,1,0,0},
			{0,0,1,0,0},
			{0,0,1,0,0},
			{0,1,1,1,1}}, {
		{0,0,1,0,0},
		{0,1,1,0,0},
		{0,0,1,0,1},
		{0,0,1,0,0},
		{0,0,1,0,0},
		{1,1,1,1,1}}, {
	{0,0,1,0,0},
	{0,0,1,0,0},
	{0,0,1,0,1},
	{0,0,1,0,0},
	{0,0,1,0,0},
	{1,1,1,1,1}}, {	
		{0,0,1,0,0},
		{0,1,1,0,0},
		{0,0,0,0,0},
		{0,0,0,0,0},
		{0,0,1,0,0},
		{1,1,1,1,1}}, {
	{0,1,1,1,0},
	{0,1,1,0,0},
	{0,0,1,0,0},
	{0,0,1,0,0},
	{0,0,1,0,0},
	{1,1,1,1,1}}, {
		{0,0,1,0,0},
		{0,0,1,0,0},
		{0,0,1,0,0},
		{0,0,0,0,0},
		{0,0,1,0,0},
		{1,1,1,1,0}}, {
	{0,0,1,1,0},
	{0,1,1,0,0},
	{1,0,1,0,0},
	{0,0,1,0,0},
	{0,0,1,0,0},
	{0,1,1,1,1}}, {
		{0,0,1,0,0},
		{0,0,1,0,0},
		{0,0,0,0,0},
		{0,0,0,0,0},
		{0,0,1,0,0},
		{1,1,1,1,1}}, {
	{0,1,1,1,0},
	{0,1,1,0,0},
	{0,0,1,0,0},
	{0,0,1,0,0},
	{0,0,1,0,0},
	{0,1,1,1,0}}};

int padrao[6][6][5] ={{
		{0,1,1,1,0},
	{1,0,0,0,1},
	{1,0,0,0,1},
	{1,0,0,0,1},
	{1,0,0,0,1},
	{0,1,1,1,0}
	},{
	{0,0,1,0,0},
	{0,1,1,0,0},
	{0,0,1,0,0},
	{0,0,1,0,0},
	{0,0,1,0,0},
	{1,1,1,1,1}
},{
{0,1,1,1,0},
	{0,1,0,1,0},
	{0,0,0,1,0},
	{0,0,1,0,0},
	{0,1,0,0,0},
	{1,1,1,1,1}
	},{
	{0,1,1,1,1},
	{0,0,0,0,1},
	{0,1,1,1,1},
	{0,0,0,0,1},
	{0,0,0,0,1},
	{0,1,1,1,1}
	},{
	{1,0,0,1,0},
	{1,0,0,1,0},
	{1,0,0,1,0},
	{1,1,1,1,0},
	{0,0,0,1,0},
	{0,0,0,1,0}
	},{
	{0,1,1,1,1},
	{0,1,0,0,0},
	{0,1,1,1,1},
	{0,0,0,0,1},
	{0,0,0,0,1},
	{0,1,1,1,1}
	}};

/* Valores pre-fixados */
int bias = 1;
int linhas = 6;
int colunas = 5;

/* Parâmetros escolhidos pelo usuário */

int padroes;
int neuronios;
int pesos; 
int taxa = 1;
int exercicio;
int ft[6][6] ={
	{1,0,0,0,0,0},
	{0,1,0,0,0,0},
	{0,0,1,0,0,0},
	{0,0,0,1,0,0},
	{0,0,0,0,1,0},
	{0,0,0,0,0,1}};

double w[6] [31]={
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}};

/* Funções */

void menu(){

	std::cout<<"Executar qual exercício?\n";
	std::cin>>exercicio;
//	std::cout<<"Taxa de aprendizagem: ";
//	std::cin>>taxa;
	std::cout<<"Pesos iniciais: \n1- Zerados\n2- Aleatórios\nOpção: "; 
	std::cin>>pesos;
}


/* Imprime os pesos */
void printPesos(){
	int i, j;
	std::cout<<"Pesos: ";
	for (j = 0; j < neuronios; j++){
		for (i = 0; i< 31; i++)
			std::cout<<w[j][i]<<' ';
		std::cout<<'\n';
	}
}

/* Imprime um padrão */
void printPadrao(int p[][5])
{
	int i;
	int j;

	for (i = 0; i < linhas; i++){
		for (j = 0; j < colunas; j++){
			if (p[i][j] == 0)
				std::cout<<" ";
			else
				std::cout<<"#";
		}
		std::cout<<'\n';
	}
}

/* Calcula números aleatórios de min a max */
double fRand(double min, double max)
{
	double f = (double)rand() / RAND_MAX;
	return floor( min + f * (max - min)*10)/10;
}

/* Função soma 
 * Exercício 1
 */		
int soma(int p[][5],double w[]){

	int i;
	int j;
	int k = 0;
	int sum = 0;
	
/* Soma ponderada com entradas xi e pesos wi */
	for (i = 0; i < linhas; i++)
		for (j = 0; j < colunas; j++){
			sum = p[i][j]*w[k];
			k++;
		}			
	
	sum += w[k]; /* Último peso =>  BIAS */

	/* Função de ativação DEGRAU */
	if (sum > 0)
		return 1;
	else 
		return 0;
}


/* Faz ajuste dos pesos de acordo com o padrão que não bateu 
 * Exercício 1
 */
void ajuste(int p[][5], int erro, double w[]){

	int i;
	int j;
	int k = 0;
	
	for (i = 0; i < linhas; i++)
		for (j = 0; j < colunas; j++){
			w[k] = w[k] +  erro*taxa*p[i][j];
			k++;
		}
		w[k] = w[k] + erro*taxa*bias;
}
	

bool neuronio(int ft[], double w[]){

	std::cout<<"Começando o neuronio\n";	
	int i, erro;
	bool ajusta = false;
	for (i = 0; i < padroes; i++){
		std::cout<<"padroes: "<<i<<'\n';
		erro = ft[i] - soma(padrao[i], w);
		if (erro != 0){	
			ajusta = true;
			ajuste(padrao[i], erro, w);
		}	
	}
	return ajuste;
}


/* Faz treinamento com entradas 0 e 1 
 * Exercício 1, 2, 3*/
int treinamento(){
	std::cout<<"Começando o treinamento "<<neuronios<<" \n";	
	int i = 0, epocas = 0;
	bool ajusta;
	/* Para cada neurônio */
	do{
		while(i < neuronios){
			ajusta = neuronio(ft[i], w[i]);
			i++;
			}
	epocas++;	
	}while(ajusta);
	
	return epocas;
}

/* Testa padrões de 2 a 6 
	FIXME
*/
void testaPadroes(){

	int i, j = 0, y1, y2;
	for (i = 2 ; i < 6; i++){
		std::cout<<"Padrao "<<i<<": ";
		y1 = soma(padrao[i], w[j]);	
		switch(exercicio){
			case 1:
				std::cout<<y1<<'\n';
				break;
			case 2:
				y2 = soma(distorcidos[i],w[j+1]);			
				if(y1 == 1){
					if (y2 == 0)
						std::cout<<"'0'\n";
					else
						std::cout<<"Padrão não foi reconhecido\n";
				}
				else{
					if (y2 == 1)
						std::cout<<"'1'\n";
					else
						std::cout<<"Padrão não foi reconhecido\n";
				}
				break;
			}
	}
}

/* Testa padrões distorcidos 
	FIXME 
*/
void testaDistorcidos(){
	int i, j = 0, y1, y2;
	std::cout<<"Dez padrões distorcidos de '0', dez padrões distorcidos de '1'\n";
	for (i = 0; i < 20; i++){
		std::cout<<"Distorcido "<<i<<": ";
		y1 = soma(distorcidos[i],w[j]); 
	switch(exercicio){
		case 1:		
				std::cout<<y1<<'\n';
			break;
		case 2:
			y2 = soma(distorcidos[i],w[j+1]);			
			if(y1 == 1){
				if (y2 == 0)
					std::cout<<"'0'\n";
				else
					std::cout<<"Padrão não foi reconhecido\n";
			}
			else{
				if (y2 == 1)
					std::cout<<"'1'\n";
				else
					std::cout<<"Padrão não foi reconhecido\n";
			}
			break;
		}
	}
}

void controle(){

	switch(exercicio){
		case 1:
			padroes = 2;
			neuronios = 1;
			break;
		case 2: 
			padroes = 2;
			neuronios = 2;
			break;
		case 3:
			padroes = 6;
			neuronios = 6;
			break;
	}
	switch(pesos){
		case 1:			// pesos zerados
//			printPesos();
			break;
		case 2: 		// pesos aleatórios de -1 a 1
			int i, j;
			for(j = 0; j < neuronios; j++)
				for (i = 0; i < 31; i++)
					w[j][i] = fRand(-1,1);
			printPesos();
			break;
		}

	switch(exercicio){
		case 1:
			int i;	
			std::cout<<"Epocas: "<<neuronio(ft[1], w[0])<<'\n'; /* letra a */
			printPesos();			/* letra b */
			testaDistorcidos();		/* letra c */
			testaPadroes(); 		/* letra d */
			break;

		case 2:
			std::cout<<"Epocas: "<<treinamento()<<'\n'; /* letra a */	
			printPesos();			/* letra b */
			testaDistorcidos();		/* letra c */
			testaPadroes(); 		/* letra d */
			break;

		case 3:
//			printPesos();
//			std::cout<<"Epocas: "<<treinamento()<<'\n'; /* letra a */
//			printPesos();
			
			break;
		}	
	}

int main(){

	unsigned int time_ui = static_cast<unsigned int>( time(NULL)%1000 );
	srand( time_ui );
	menu();
	controle();
}
